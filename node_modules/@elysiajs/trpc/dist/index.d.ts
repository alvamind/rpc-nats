import { Elysia } from 'elysia';
import { type Router } from '@trpc/server';
import type { TSchema } from '@sinclair/typebox';
import type { TRPCOptions } from './types';
export declare function compile<T extends TSchema>(schema: T): (value: unknown) => unknown;
export declare const trpc: (router: Router<any>, { endpoint, ...options }?: TRPCOptions) => (eri: Elysia) => Elysia<"", false, {
    decorator: {};
    store: {};
    derive: {};
    resolve: {};
}, {
    type: {};
    error: {};
}, {
    schema: {};
    macro: {};
    macroFn: {};
}, {
    [x: string]: {
        "*": {
            get: {
                body: unknown;
                params: {
                    "*": string;
                };
                query: unknown;
                headers: unknown;
                response: {
                    200: Response;
                };
            };
        };
    };
} & {
    [x: string]: {
        "*": {
            post: {
                body: unknown;
                params: {
                    "*": string;
                };
                query: unknown;
                headers: unknown;
                response: {
                    200: Response;
                };
            };
        };
    };
}, {
    derive: {};
    resolve: {};
    schema: {};
}, {
    derive: {};
    resolve: {};
    schema: {};
}>;
export type { TRPCClientIncomingRequest, TRPCOptions } from './types';
